Funkció:

A tank egy felderítési célokra alkalmas, vezeték nélküli vezérléssel ellátott eszköz, 
amely többek között képes az adott helyszínen hőmérséklet illetve páratartalom 
mérést végrehajtani, majd a mért adatokat továbbítja a kezelő számára.
A mért adatokról diagramot is készít, majd ezt meg is jeleníti egy webes felületen keresztül.
A tank, a kezelő által megtett útvonalat szintén megjeleníti ugyan azon webes felületen kersztül.



Alkatrészek:

A projektünk során mi egy "Raspberry pi 3 b+"-t használtunk. 
Ennek specifikációja a következő:
	Broadcom BCM2837B0, Cortex-A53 (ARMv8) 64-bit SoC @ 1.4GHz
	1GB LPDDR2 SDRAM
	2.4GHz and 5GHz IEEE 802.11.b/g/n/ac wireless LAN, Bluetooth 4.2, BLE
	Gigabit Ethernet over USB 2.0 (maximum throughput 300 Mbps)
	Extended 40-pin GPIO header
	Full-size HDMI
	4 USB 2.0 ports
	CSI camera port for connecting a Raspberry Pi camera
	DSI display port for connecting a Raspberry Pi touchscreen display
	4-pole stereo output and composite video port
	Micro SD port for loading your operating system and storing data
	5V/2.5A DC power input
	Power-over-Ethernet (PoE) support (requires separate PoE HAT)

Az áramellátásért egy 8000mAh-os, 12V-os lítiumion-akkumulátor felel.
Az akkumulátor méretét tekintve 127 x 65 x 23mm. A kimeneti feszültsége 10.8 - 12.6 DC, a kimeneti 
áramerőssége pedig 1 - 2.4A.
A 12V-ot átalakítottuk 5V-ra, egy LM2596-os típusú léptető modul segítségével. Erre a lépésre azért volt szükség,
mivel a tankot hajtó motoroknak elengedhetetlen hogy 12V-ról üzemeljenek, ugyanakkor a mikroszámítógép
üzemeltetéséhez csupán 5V-ra van szükségünk. Tehát ez azt eredményezi, hogy az akkumulátorból
indul egy 12V-os ág a motorhoz, illetve egy 12-ből 5V-ra átalakított ág a mikroszámítógépbe.
Az eddig említett eszközökkel felmerült egy olyan probléma, hogy hogy az akkumulátor az elvártnál 
rövidebb időtartam alatt lemerült. Ebből az okból kifolyólag úgy döntöttünk, hogy 

a tankot ellátjuk még egy további külső akkumulátorral is. 
//aksi paraméterei

A vezérléshez egy Geekcreit® L298N típusú modult használtunk.
Ez a modul méreteit tekintve 43 x 43 x 27mm.
A tankhoz mindenképp szükségünk volt egy iránytűre és egy gyro szenzorra, ezeket a feladatokat
egy MPU9250-as egység látja el. A szenzor elhelyezésekor olyan problémát tapasztaltunk,
hogy valamilyen külső behatás következtében zavar keletkezett a modul működésében.
Ezért hosszas tesztelések után arra a következtetésre jutottunk, hogy a szenzort
a tank elejében, lehetőség szerint minél feljebb lenne optimális elhelyezni.
Ilyen módon sikeresen ki lehet küszöbölni a külső zavarokat.
// meghibásodás
// két új szenzor beszerzése

A tank vázának egy "3V-9V DIY Shock Absorbed Smart Robot Tank Chassis Car Kit"-et használtunk,
ebbe lettek beleépítve a már korábban említett komponensek. A tank vázához gyárilag tartozott két darab 
260-as motor. Mivel ez a váz eredeti állapotában felül teljesen nyitott, így készíteni kellett hozzá
egy műanyag plexi lemezt amely védi a belső alkatrészeket, illetve ily módon több helyet is biztosít,
mivel így már a tank tetején is lehetővé vált bizonyos alkatrészek elhelyezése.
A tank tetején kapott helyet például maga a mikroszámítógép, a már korábban említett két akkumulátor,
továbbá a ár szintén tárgyalt MPU9250-es modul.

A tank belsejében található még egy hőmérséklet mérő szenzor is, melyről korábban még nem esett szó.
Ez tulajdonképpen egy DHT11-es típusú hőmérséklet és páratartalom mérő szenzor.
A hőmérséklet mérésének tartománya 0°C-tól 50°C-ig terjed, ennek a pontossága pedig ±2.0°C.
A páratartalom mérésének tartománya 20%-90%RH, pontosságát tekintve pedig ±5.0%RH.
Az eszköz válasz ideje 5s alatt, mérete pedig 2.3cm x 1.2cm x 0.5cm.

A tankot elláttuk egy Logitech QuickCam C500-as típusú webkamerával is elláttuk, hogy 
a tank kezelője könnyebben és nagyobb távolságból is hatékonyan tudja irányítani az eszközt.
A kamera nem képes sem digitális, sem pedig optikai zoomra, azonban beépített mikrofonnal 
rendelkezik, így akár a tank irányítása alatt könnyebben oda tudunk figyelni a környezetére.
A kamera maximális képfrissítése 30fps, felbontása pedig 1,3 megapixel azaz
egészen pontosan 1280 x 1024-es videófelbontásra képes.

Vezetékekből a következő névre hallgató típust használtuk:"Geekcreit? 3 IN 1 120pcs 10cm 
Male To Female Female To Female Male To Male Jumper Cable".




Alkatrészek elhelyezése:

//coming soon




Importált modulok a programkódban:

	time:
		Ez a modul különböző időfüggő feladatok ellátásáért felel. Habár ez a modul
		mindig elérhető, mégsem minden funkciója érhető el az összes platformon.
		
	datetime:
		Ez a modul a dátumok és idő kezeléséért felelős.
		
	threading:
		Ennek a modulnak a használata engedélyezi a programnak hogy különböző feladatokat egyidejűleg is 
		képes legyen futtatni ugyan abban a folyamattérben.
		
	argparse:
		Az argparse modul automatikusan létrehoz különböző üzeneteket a felhasználó
		számára, amennyiben érvénytelen paramétert ad meg a programnak.
	
	Egyéb importált modulok:
		imutils, cv2, os.path


Programkód:
	A kezdési idő elmentése:
    		while GPIO.input(GPIO_ECHO) == 0:
        		StartTime = time.time()

    	Az érkezési idő elmentése:
    		while GPIO.input(GPIO_ECHO) == 1:
        		StopTime = time.time()

    	Az időkülönbség kiszámítása indulás és érkezés között:
    		TimeElapsed = StopTime - StartTime

    	Megszorozzuk a szonikus sebességgel (34300 cm/s), majd ezt osztanunk kell kettővel az oda vissza út 
	megtétele miatt:
    		distance = (TimeElapsed * 34300) / 2
    		dist = int(distance)
	
	A gyorsulásmérő és a giroszkóp nyers adatainak beolvasása:
		def gyro():
    		global Ax, Ay, Az, Gx, Gy, Gz
    		acc_x = read_raw_data(ACCEL_XOUT_H)
    		acc_y = read_raw_data(ACCEL_YOUT_H)
    		acc_z = read_raw_data(ACCEL_ZOUT_H)
    		gyro_x = read_raw_data(GYRO_XOUT_H)
    		gyro_y = read_raw_data(GYRO_YOUT_H)
    		gyro_z = read_raw_data(GYRO_ZOUT_H)
		
	A teljes mérési tartománya +- 250 °C érzékenységi skála tényezőnként:
    		Ax = acc_x / 16384.0
    		Ay = acc_y / 16384.0
   		 Az = acc_z / 16384.0
    		Gx = gyro_x / 131.0
    		Gy = gyro_y / 131.0
    		Gz = gyro_z / 131.0
    		print("Gx=%.2f" % Gx, u'\u00b0' + "/s", "\tGy=%.2f" % Gy, u'\u00b0' + "/s", "\tGz=%.2f" % Gz, u'\u00b0' + "/s",
         	"\tAx=%.2f g" % Ax, "\tAy=%.2f g" % Ay, "\tAz=%.2f g" % Az)

	Érzékelő típusának beállítása : DHT11,DHT22 vagy AM2302
	A szenzorunk a következő GPIO-ra van kötve:
		global temp, hum
    		gpio = 17
	
	A read_retry eljárást használjuk. 
	Ez akár 15x is megpróbálja kiolvasni az érzékelőből az adatot (és minden olvasás előtt 2 másodpercet vár):
		ity, temperature = Adafruit_DHT.read(Adafruit_DHT.DHT11, gpio)
		
	HT11 kiolvasása nagyon érzékeny az időzítésre és a Pi alkalmanként
    	nem tud helyes értéket kiolvasni. Ezért megnézzük, hogy helyesek-e a kiolvasott értékek:
		if humidity is not None and temperature is not None:
        		temp = temperature
        		hum = humidity
    		else:
        		return "", ""

	új képkocka létrehozása és zárolása amíg az első folyamatban van:
		outputFrame = None
		lock = threading.Lock()
		
	flask objektum létrehozása:
		app = Flask(__name__)
	
	video közvetítés létrehozása és kamera szenzor engedélyezése:
		vs = VideoStream(src=0).start()
		time.sleep(2.0)
		
	visszaadja a render sablont:
		return render_template("basic.html")
		
	a globális referenciákat beleteszi a video közvetítésbe, kimeneti képkockába és a zároló változóba:
		global vs, outputFrame, lock
		
	kiolvassa a következő képkockát, majd újra méretezi, beszürkíti és elhomályosítja a képkockát:
		while True:
			frame = vs.read()
        		frame = imutils.resize(frame, width=400)

        		with lock:
            		outputFrame = frame.copy()
			
	hozzáadja a globális referenciát a kimeneti képkockához és zárolja a változókat:
		global outputFrame, lock
		
	várakozik amíg a zároló meg nem kapta, ellenőrzi hogy elérhető-e a kimeneti képkocka, ellenkező esetben továbbugrik:
		while True:
			with lock:
				if outputFrame is None:
                			continue
				# képkocka kódolása JPEG formátumban:
				(flag, encodedImage) = cv2.imencode(".jpg", outputFrame)
				
				# ellenőrzi hogy sikeres volt-e a kódolás:
            			if not flag:
               		 		continue
	
	Inputok kijelzése:
    		content = "<h2>Inputok(x/y) : " + str(x) + " : " + str(y) + "</h2>"
    		# DHT11 (Hőfok és páratartalom szenzor) adatai:
    		content += "<h2>Páratartalom / Hőmérséklet : " + str(hum) + " ; " + str(temp) + "</h2>"
    		# SR04 (Ultrahangos távolságszenzor) adatai:
    		content += "<h2>Távolság : " + str(dist) + " Valós: " + str(dist - 9) + "</h2>"
    		# MPU 6050:
    		content += "<h2>Gyorsulás : " + str(Ax) + " " + str(Ay) + " " + str(Az) + "</h2>"
    		content += "<h2>Helyzet : " + str(Gx) + " " + str(Gy) + " " + str(Gz) + "</h2>"
	
	mozgásérzékelés indítása:
		t = threading.Thread(target=detect_motion, args=(
       			args["frame_count"],))
    		t.daemon = True
    		t.start()
		
	flask alkalmazás indítása:
		app.run(host=args["ip"], port=args["port"], debug=True,
            		threaded=True, use_reloader=False)
	




Egyéb:

A tank.py elindítása a python3 tank.py-n keresztül történik. Ez el fog indítani egy
webszervert, majd a webszervert a html_page/ mappa fogja majd kiszolgálni.
A html_page tartamla a következő:
basic.html ez a manuális irányítás oldala, ahol egy virtuális joystick segítségével irányíthatjuk a tankot.
Függőségek amiket más oldalak használnak:
	virtualjoystick.js	
	jquery-3.4.1.js	
stat.html ez a tank.py statisztikáit fogja majd megmutatni.
log.py ez a tank.py logjait fogja megmutatni.
